#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Dec  3 16:22:28 2020

@author: Tobias Andermann (tobiasandermann88@gmail.com)
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import collections
from matplotlib import cm

def count_kmers(sequence, k):
    d = collections.defaultdict(int)
    for i in range(len(sequence)-(k-1)):
        d[sequence[i:i+k]] +=1
    for key in d.keys():
        if "N" in key:
            del d[key]
    return d

def probabilities(sequence, kmer_count, k):
    probabilities = collections.defaultdict(float)
    N = len(sequence)
    for key, value in kmer_count.items():
        probabilities[key] = float(value) / (N - k + 1)
    return probabilities

def chaos_game_representation(probabilities, k):
    array_size = int(np.sqrt(4**k))
    chaos = np.zeros([array_size,array_size])
    maxx = array_size
    maxy = array_size
    posx = 1
    posy = 1
    for key, value in probabilities.items():
        for char in key:
            if char == "T":
                posx += maxx / 2
            elif char == "C":
                posy += maxy / 2
            elif char == "G":
                posx += maxx / 2
                posy += maxy / 2
            maxx = maxx / 2
            maxy /= 2
        chaos[int(posy)-1][int(posx)-1] = value
        maxx = array_size
        maxy = array_size
        posx = 1
        posy = 1
    return chaos

dna_seq = 'ACTAGTATTCGCGCTCCTTGGAGCGGTGCATGGTCTTGACAAAATATGTCTTGGACATCATGCAGTCTCCAACGGCACCATCGTAAAGACTCTCACAAACGAAAAGGAAGAGGTGACCAATGCTACTGAAACAGTGGAGAGCAAAAGCCTGGACAAACTTTGCATGAAAAGTCGAAATTATAAGGACTTAGGTAATTGCCACCCAATAGGGATGATAATAGGGACTCCTGCTTGTGATCTACATCTTACCGGAACATGGGACACTTTAATAGAGAGAGACAATTCTATTGCCTATTGTTACCCGGGTGCCACTGTGAATGAAGAAGCATTAAGGCAGAAAATTATGGAAAGTGGAGGGATTGACAAGATAAGCACCGGGTTCACATATGGATCATCCATCAATTCAGCTGGAACCACTAAAGCATGTATGAGAAATGGAGGAAATAGTTTCTATGCGGAACTAAAGTGGCTAGTGTCGAAAAGCAAAGGACAAAACTTCCCACAAACAACAAACACATACAGAAATACAGATTCAGCAGAACATCTTATAATCTGGGGAATTCATCACCCTTCAAGCACACAAGAAAAGAATGACCTATATGGAACACAATCACTTTCCATTTCAGTGGGGAGTTCTACTTATCAAAACAACTTTGTGCCTGTGGTGGGAGCAAGACCACAAGTGAATGGCCAAAGCGGGCGGATTGACTTCCATTGGACGATGGTACAACCAGGTGATAACATCACTTTCTCGCATAATGGTGGATTAATAGCACCCAGCAGAGTGAGTAAGCTAAAGGGAAGAGGCCTTGGCATTCAATCAGGAGCTTCAGTAGACAATGACTGTGAGTCAAAATGTTTCTGGAAAGGTGGATCCATCAACACCAAACTCCCTTTTCAGAATCTTTCTCCAAGAACCGTGGGTCAATGCCCCAAGTATGTGAACAAAAAGAGCCTGTTGCTTGCTACTGGAATGAGGAATGTGCCAGAGGTTGTCCAAGGAAGAGGCCTGTTTGGAGCAATAGCTGGATTCATAGAAAATGGATGGGAAGGGATGGTAGATGGTTGGTATGGTTTCCGGCACCAAAATGCCCAAGGCACTGGTCAGGCCGCGGATTACAAAAGTACTCAGGCAGCTATAGATCAAATAACCGGGAAATTGAACAGGCTGATAGAGAAGACAAACACAGAATTCGAATCCATAGAGTCTGAGTTCAGTGAAATAGAACATCAAATCGGTAATGTAATAAACTGGACTAAAGATTCTATAACAGACATCTGGACGTATCAAGCTGAATTGCTGGTGGCAATGGAAAATCAGCATACAATTGACATGGCTGATTCAGAAATGCTGAATCTATATGAGAGAGTGAGGAAACAACTAAGGCAAAATGCTGAAGAAGATGGGAAAGGGTGCTTTGAGATATATCACAAATGCGATGACAACTGCATGGAAAGCATCAGAAACAACACTTATGACCATACACAATACAGAGAAGAAGCACTCTTGAACAGACTCAACATTAATCCGGTGAAACTCTCTTCTGGGTACAAAGATGTTATACTATGGTTCAGCTTCGGGGCGTCATGCTTTGTACTTTTGGCTGTCATCATGGGGCTTGTTTTCTTCTGCTTGAAAAATGGAAACATGCGATGCACAATCTGTATTTAGTTAAAAACACC'
kmer_size = 4
kmer_count = count_kmers(dna_seq,kmer_size)
kmer_probs = probabilities(dna_seq, kmer_count, kmer_size)
cgr_array = chaos_game_representation(kmer_probs, kmer_size)


plt.imshow(cgr_array, interpolation='nearest', cmap=cm.gray_r)
plt.show()

